// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PublicKeyContract API should match snapshot 1`] = `
Object {
  "contractName": "PublicKeyContract",
  "contractVersion": "?.?.?",
  "methods": Array [
    Object {
      "apiMethodName": undefined,
      "description": undefined,
      "dtoSchema": undefined,
      "isWrite": false,
      "methodName": "GetChaincodeVersion",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "string",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": undefined,
      "dtoSchema": undefined,
      "isWrite": false,
      "methodName": "GetContractAPI",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "object",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": "Returns profile for the calling user. Since the profile contains also eth address of the user, this method is supported only for signature based authentication.",
      "dtoSchema": Object {
        "properties": Object {
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetMyProfile",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "null",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": undefined,
      "dtoSchema": Object {
        "properties": Object {
          "objectId": Object {
            "minLength": 1,
            "type": "string",
          },
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": Array [
          "objectId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetObjectByKey",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "object",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": undefined,
      "dtoSchema": Object {
        "properties": Object {
          "objectId": Object {
            "minLength": 1,
            "type": "string",
          },
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": Array [
          "objectId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetObjectHistory",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "object",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": "[Deprecated] Returns public key for the user",
      "dtoSchema": Object {
        "properties": Object {
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "user": Object {
            "description": "Id of a public key holder. Optional field, by default caller's public key is returned.",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetPublicKey",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "properties": Object {
              "publicKey": Object {
                "minLength": 1,
                "type": "string",
              },
            },
            "required": Array [
              "publicKey",
            ],
            "type": "object",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": "Registers a new user on chain under alias derived from eth address.",
      "dtoSchema": Object {
        "description": "Dto for secure method to save public keys for Eth users. Method is called and signed by Curators",
        "properties": Object {
          "publicKey": Object {
            "description": "A public key to be saved on chain.
It should be just the private part of the EC secp256k1 key, than can be retrieved this way: \`openssl ec -in priv-key.pem -text | grep pub -A 5 | tail -n +2 | tr -d '\\\\n[:space:]:\`. The previous command produces an uncompressed hex string, but you can also provide an compressed one, as well as compressed and uncompressed base64 secp256k1 key. A secp256k1 public key is saved on chain as compressed base64 string.",
            "minLength": 1,
            "type": "string",
          },
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": Array [
          "publicKey",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "RegisterEthUser",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "string",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": "Registers a new user on chain under provided user alias.",
      "dtoSchema": Object {
        "description": "Dto for secure method to save public keys for legacy users. Method is called and signed by Curators",
        "properties": Object {
          "publicKey": Object {
            "description": "A public key to be saved on chain.
It should be just the private part of the EC secp256k1 key, than can be retrieved this way: \`openssl ec -in priv-key.pem -text | grep pub -A 5 | tail -n +2 | tr -d '\\\\n[:space:]:\`. The previous command produces an uncompressed hex string, but you can also provide an compressed one, as well as compressed and uncompressed base64 secp256k1 key. A secp256k1 public key is saved on chain as compressed base64 string.",
            "minLength": 1,
            "type": "string",
          },
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "user": Object {
            "description": "Id of user to save public key for.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": Array [
          "user",
          "publicKey",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "RegisterUser",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "string",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": "Updates public key for the calling user.",
      "dtoSchema": Object {
        "properties": Object {
          "publicKey": Object {
            "description": "A public key to be saved on chain.
It should be just the private part of the EC secp256k1 key, than can be retrieved this way: \`openssl ec -in priv-key.pem -text | grep pub -A 5 | tail -n +2 | tr -d '\\\\n[:space:]:\`. The previous command produces an uncompressed hex string, but you can also provide an compressed one, as well as compressed and uncompressed base64 secp256k1 key. A secp256k1 public key is saved on chain as compressed base64 string.",
            "minLength": 1,
            "type": "string",
          },
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": Array [
          "publicKey",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "UpdatePublicKey",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "null",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
    Object {
      "apiMethodName": undefined,
      "description": "Verifies signature of the DTO signed with caller's private key to be verified with user's public key saved on chain.",
      "dtoSchema": Object {
        "properties": Object {
          "signature": Object {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain.
JSON payload to be signed is created from an object without 'signature' and 'trace\` properties, and it's keys should be sorted alphabetically and no end of line at the end. Sample jq command to produce valid data to sign: \`jq -cSj \\".\\" dto-file.json\`.Also all BigNumber data should be provided as strings (not numbers) with fixed decimal point notation.
The EC secp256k1 signature should be created for keccak256 hash of the data. The recommended format of the signature is a HEX encoded string, including r + s + v values. Signature in this format is supported by ethers.js library. Sample signature: b7244d62671319583ea8f30c8ef3b343cf28e7b7bd56e32b21a5920752dc95b94a9d202b2919581bcf776f0637462cb67170828ddbcc1ea63505f6a211f9ac5b1b
This field can also contain a DER encoded signature, but this is deprecated and supported only to provide backwards compatibility. DER encoded signature cannot be used recover user's public key from the signature, and cannot be used with the new signature-based authorization flow for Gala Chain.
",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": Object {
            "description": "Public key of the user who signed the DTO. Required for DER encoded signatures, since they miss recovery part.",
            "minLength": 1,
            "type": "string",
          },
          "uniqueKey": Object {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "VerifySignature",
      "responseSchema": Object {
        "properties": Object {
          "Data": Object {
            "type": "null",
          },
          "Message": Object {
            "type": "string",
          },
          "Status": Object {
            "description": "Indicates Error (0) or Success (1)",
            "enum": Array [
              0,
              1,
            ],
          },
        },
        "required": Array [
          "Status",
        ],
        "type": "object",
      },
      "sequence": undefined,
    },
  ],
}
`;
